"""
This type stub file was generated by pyright.
"""

import marshmallow as ma

"""Pagination feature

Two pagination modes are supported:

- Pagination inside the resource: the resource function is responsible for
  selecting requested range of items and setting total number of items.

- Post-pagination: the resource returns an iterator (typically a DB cursor) and
  a pager is provided to paginate the data and get the total number of items.
"""
class PaginationParameters:
    """Holds pagination arguments

    :param int page: Page number
    :param int page_size: Page size
    """
    def __init__(self, page, page_size) -> None:
        ...
    
    @property
    def first_item(self):
        """Return first item number"""
        ...
    
    @property
    def last_item(self):
        """Return last item number"""
        ...
    
    def __repr__(self):
        ...
    


class Page:
    """Pager for simple types such as lists.

    Can be subclassed to provide a pager for a specific data object.
    """
    def __init__(self, collection, page_params) -> None:
        """Create a Page instance

        :param sequence collection: Collection of items to page through
        :page PaginationParameters page_params: Pagination parameters
        """
        ...
    
    @property
    def items(self):
        ...
    
    @property
    def item_count(self):
        ...
    
    def __repr__(self):
        ...
    


class PaginationMetadataSchema(ma.Schema):
    """Pagination metadata schema

    Used to serialize pagination metadata.
    Its main purpose is to document the pagination metadata.
    """
    total = ...
    total_pages = ...
    first_page = ...
    last_page = ...
    page = ...
    previous_page = ...
    next_page = ...
    class Meta:
        ordered = ...
    
    


class PaginationMixin:
    """Extend Blueprint to add Pagination feature"""
    PAGINATION_ARGUMENTS_PARSER = ...
    PAGINATION_HEADER_FIELD_NAME = ...
    DEFAULT_PAGINATION_PARAMETERS = ...
    def paginate(self, pager=..., *, page=..., page_size=..., max_page_size=...):
        """Decorator adding pagination to the endpoint

        :param Page pager: Page class used to paginate response data
        :param int page: Default requested page number (default: 1)
        :param int page_size: Default requested page size (default: 10)
        :param int max_page_size: Maximum page size (default: 100)

        If a :class:`Page <Page>` class is provided, it is used to paginate the
        data returned by the view function, typically a lazy database cursor.

        Otherwise, pagination is handled in the view function.

        The decorated function may return a tuple including status and/or
        headers, like a typical flask view function. It may not return a
        ``Response`` object.

        See :doc:`Pagination <pagination>`.
        """
        ...
    


