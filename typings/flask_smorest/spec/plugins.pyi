"""
This type stub file was generated by pyright.
"""

import re
from apispec import BasePlugin

"""Flask plugin

Heavily copied from apispec
"""
RE_URL = re.compile(r'<(?:[^:<>]+:)?([^<>]+)>')
def baseconverter2paramschema(converter):
    ...

def unicodeconverter2paramschema(converter):
    ...

def integerconverter2paramschema(converter):
    ...

def floatconverter2paramschema(converter):
    ...

def anyconverter2paramschema(converter):
    ...

def uuidconverter2paramschema(converter):
    ...

DEFAULT_CONVERTER_MAPPING = { werkzeug.routing.BaseConverter: baseconverter2paramschema,werkzeug.routing.AnyConverter: anyconverter2paramschema,werkzeug.routing.UnicodeConverter: unicodeconverter2paramschema,werkzeug.routing.IntegerConverter: integerconverter2paramschema,werkzeug.routing.FloatConverter: floatconverter2paramschema,werkzeug.routing.UUIDConverter: uuidconverter2paramschema }
class FlaskPlugin(BasePlugin):
    """Plugin to create OpenAPI paths from Flask rules"""
    def __init__(self) -> None:
        ...
    
    def init_spec(self, spec):
        ...
    
    @staticmethod
    def flaskpath2openapi(path):
        """Convert a Flask URL rule to an OpenAPI-compliant path.

        :param str path: Flask path template.
        """
        ...
    
    def register_converter(self, converter, func):
        """Register custom path parameter converter

        :param BaseConverter converter: Converter.
            Subclass of werkzeug's BaseConverter
        :param callable func: Function returning a parameter schema from
            a converter intance
        """
        ...
    
    def rule_to_params(self, rule):
        """Get parameters from flask Rule"""
        ...
    
    def path_helper(self, rule, operations, parameters, **kwargs):
        """Get path from flask Rule and set path parameters in operations"""
        ...
    


