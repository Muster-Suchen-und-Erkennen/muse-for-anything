"""
This type stub file was generated by pyright.
"""

from . import base

"""Strategies for creating new instances of Engine types.

These are semi-private implementation classes which provide the
underlying behavior for the "strategy" keyword argument available on
:func:`~sqlalchemy.engine.create_engine`.  Current available options are
``plain``, ``threadlocal``, and ``mock``.

New strategies can be added via new ``EngineStrategy`` classes.
"""
strategies = {  }
class EngineStrategy(object):
    """An adaptor that processes input arguments and produces an Engine.

    Provides a ``create`` method that receives input arguments and
    produces an instance of base.Engine or a subclass.

    """
    def __init__(self) -> None:
        ...
    
    def create(self, *args, **kwargs):
        """Given arguments, returns a new Engine instance."""
        ...
    


class DefaultEngineStrategy(EngineStrategy):
    """Base class for built-in strategies."""
    def create(self, name_or_url, **kwargs):
        ...
    


class PlainEngineStrategy(DefaultEngineStrategy):
    """Strategy for configuring a regular Engine."""
    name = ...
    engine_cls = ...


class ThreadLocalEngineStrategy(DefaultEngineStrategy):
    """Strategy for configuring an Engine with threadlocal behavior."""
    name = ...
    engine_cls = ...


class MockEngineStrategy(EngineStrategy):
    """Strategy for configuring an Engine-like object with mocked execution.

    Produces a single mock Connectable object which dispatches
    statement execution to a passed-in function.

    """
    name = ...
    def create(self, name_or_url, executor, **kwargs):
        ...
    
    class MockConnection(base.Connectable):
        def __init__(self, dialect, execute) -> None:
            ...
        
        engine = ...
        dialect = ...
        name = ...
        schema_for_object = ...
        def contextual_connect(self, **kwargs):
            ...
        
        def connect(self, **kwargs):
            ...
        
        def execution_options(self, **kw):
            ...
        
        def compiler(self, statement, parameters, **kwargs):
            ...
        
        def create(self, entity, **kwargs):
            ...
        
        def drop(self, entity, **kwargs):
            ...
        
        def execute(self, object_, *multiparams, **params):
            ...
        
    
    


