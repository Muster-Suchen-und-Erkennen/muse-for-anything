"""
This type stub file was generated by pyright.
"""

"""Legacy routines to resolve circular module imports at runtime.

These routines are replaced in 1.4.

"""
class _memoized_property(object):
    """vendored version of langhelpers.memoized_property.

    not needed in the 1.4 version of preloaded.

    """
    def __init__(self, fget, doc=...) -> None:
        ...
    
    def __get__(self, obj, cls):
        ...
    


class dependencies(object):
    """Apply imported dependencies as arguments to a function.

    E.g.::

        @util.dependencies(
            "sqlalchemy.sql.widget",
            "sqlalchemy.engine.default"
        );
        def some_func(self, widget, default, arg1, arg2, **kw):
            # ...

    Rationale is so that the impact of a dependency cycle can be
    associated directly with the few functions that cause the cycle,
    and not pollute the module-level namespace.

    """
    def __init__(self, *deps) -> None:
        ...
    
    def __call__(self, fn):
        ...
    
    @classmethod
    def resolve_all(cls, path):
        ...
    
    _unresolved = ...
    _by_key = ...
    class _importlater(object):
        _unresolved = ...
        _by_key = ...
        def __new__(cls, path, addtl):
            ...
        
        def __init__(self, path, addtl) -> None:
            ...
        
        @_memoized_property
        def module(self):
            ...
        
        def __getattr__(self, key):
            ...
        
    
    


