"""
This type stub file was generated by pyright.
"""

import collections
import contextlib
import operator
import platform
import sys
import base64
import builtins
import itertools
from functools import reduce
from datetime import tzinfo

"""Handle Python version/platform incompatibilities."""
py36 = sys.version_info >= (3, 6)
py33 = sys.version_info >= (3, 3)
py35 = sys.version_info >= (3, 5)
py32 = sys.version_info >= (3, 2)
py3k = sys.version_info >= (3, 0)
py2k = sys.version_info < (3, 0)
py265 = sys.version_info >= (2, 6, 5)
jython = sys.platform.startswith("java")
pypy = hasattr(sys, "pypy_version_info")
win32 = sys.platform.startswith("win")
osx = sys.platform.startswith("darwin")
cpython = not pypy and not jython
arm = "aarch" in platform.machine().lower()
contextmanager = contextlib.contextmanager
dottedgetter = operator.attrgetter
namedtuple = collections.namedtuple
next = next
FullArgSpec = collections.namedtuple("FullArgSpec", ["args", "varargs", "varkw", "defaults", "kwonlyargs", "kwonlydefaults", "annotations"])
if py265:
    safe_kwarg = lambda arg: arg
else:
    safe_kwarg = str
def inspect_getfullargspec(func):
    """Fully vendored version of getfullargspec from Python 3.3."""
    ...

if py3k:
    string_types = (str, )
    binary_types = (bytes, )
    binary_type = bytes
    text_type = str
    int_types = (int, )
    iterbytes = iter
    itertools_filterfalse = itertools.filterfalse
    itertools_filter = filter
    itertools_imap = map
    exec_ = getattr(builtins, "exec")
    import_ = getattr(builtins, "__import__")
    print_ = getattr(builtins, "print")
    def b(s):
        ...
    
    def b64decode(x):
        ...
    
    def b64encode(x):
        ...
    
    def decode_backslashreplace(text, encoding):
        ...
    
    def cmp(a, b):
        ...
    
    def raise_(exception, with_traceback=..., replace_context=..., from_=...):
        r"""implement "raise" with cause support.

        :param exception: exception to raise
        :param with_traceback: will call exception.with_traceback()
        :param replace_context: an as-yet-unsupported feature.  This is
         an exception object which we are "replacing", e.g., it's our
         "cause" but we don't want it printed.    Basically just what
         ``__suppress_context__`` does but we don't want to suppress
         the enclosing context, if any.  So for now we make it the
         cause.
        :param from\_: the cause.  this actually sets the cause and doesn't
         hope to hide it someday.

        """
        ...
    
    def u(s):
        ...
    
    def ue(s):
        ...
    
else:
    string_types = (basestring, )
    binary_types = (bytes, )
    binary_type = str
    text_type = unicode
    int_types = (int, long)
    callable = callable
    cmp = cmp
    reduce = reduce
    b64encode = base64.b64encode
    b64decode = base64.b64decode
    itertools_filterfalse = itertools.ifilterfalse
    itertools_filter = itertools.ifilter
    itertools_imap = itertools.imap
    def b(s):
        ...
    
    def exec_(func_text, globals_, lcl=...):
        ...
    
    def iterbytes(buf):
        ...
    
    def import_(*args):
        ...
    
    def print_(*args, **kwargs):
        ...
    
    def u(s):
        ...
    
    def ue(s):
        ...
    
    def decode_backslashreplace(text, encoding):
        ...
    
    def safe_bytestring(text):
        ...
    
if py35:
    def inspect_formatargspec(args, varargs=..., varkw=..., defaults=..., kwonlyargs=..., kwonlydefaults=..., annotations=..., formatarg=..., formatvarargs=..., formatvarkw=..., formatvalue=..., formatreturns=..., formatannotation=...):
        """Copy formatargspec from python 3.7 standard library.

        Python 3 has deprecated formatargspec and requested that Signature
        be used instead, however this requires a full reimplementation
        of formatargspec() in terms of creating Parameter objects and such.
        Instead of introducing all the object-creation overhead and having
        to reinvent from scratch, just copy their compatibility routine.

        Utimately we would need to rewrite our "decorator" routine completely
        which is not really worth it right now, until all Python 2.x support
        is dropped.

        """
        ...
    
else:
    def inspect_formatargspec(*spec, **kw):
        ...
    
if py33:
    ...
else:
    ...
@contextlib.contextmanager
def nested(*managers):
    """Implement contextlib.nested, mostly for unit tests.

    As tests still need to run on py2.6 we can't use multiple-with yet.

    Function is removed in py3k but also emits deprecation warning in 2.7
    so just roll it here for everyone.

    """
    ...

def raise_from_cause(exception, exc_info=...):
    r"""legacy.  use raise\_()"""
    ...

def reraise(tp, value, tb=..., cause=...):
    r"""legacy.  use raise\_()"""
    ...

def with_metaclass(meta, *bases):
    """Create a base class with a metaclass.

    Drops the middle class upon creation.

    Source: http://lucumr.pocoo.org/2013/5/21/porting-to-python-3-redux/

    """
    class metaclass(meta):
        ...
    
    

if py3k:
    ...
else:
    class timezone(tzinfo):
        """Minimal port of python 3 timezone object"""
        __slots__ = ...
        def __init__(self, offset) -> None:
            ...
        
        def __eq__(self, other) -> bool:
            ...
        
        def __hash__(self) -> int:
            ...
        
        def __repr__(self):
            ...
        
        def __str__(self) -> str:
            ...
        
        def utcoffset(self, dt):
            ...
        
        def tzname(self, dt):
            ...
        
        def dst(self, dt):
            ...
        
        def fromutc(self, dt):
            ...
        
        _maxoffset = ...
        _minoffset = ...
    
    
