"""
This type stub file was generated by pyright.
"""

"""Exceptions used with SQLAlchemy.

The base exception class is :exc:`.SQLAlchemyError`.  Exceptions which are
raised as a result of DBAPI exceptions are all subclasses of
:exc:`.DBAPIError`.

"""
_version_token = None
class SQLAlchemyError(Exception):
    """Generic error class."""
    code = ...
    def __init__(self, *arg, **kw) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __unicode__(self):
        ...
    


class ArgumentError(SQLAlchemyError):
    """Raised when an invalid or conflicting function argument is supplied.

    This error generally corresponds to construction time state errors.

    """
    ...


class ObjectNotExecutableError(ArgumentError):
    """Raised when an object is passed to .execute() that can't be
    executed as SQL.

    .. versionadded:: 1.1

    """
    def __init__(self, target) -> None:
        ...
    


class NoSuchModuleError(ArgumentError):
    """Raised when a dynamically-loaded module (usually a database dialect)
    of a particular name cannot be located."""
    ...


class NoForeignKeysError(ArgumentError):
    """Raised when no foreign keys can be located between two selectables
    during a join."""
    ...


class AmbiguousForeignKeysError(ArgumentError):
    """Raised when more than one foreign key matching can be located
    between two selectables during a join."""
    ...


class CircularDependencyError(SQLAlchemyError):
    """Raised by topological sorts when a circular dependency is detected.

    There are two scenarios where this error occurs:

    * In a Session flush operation, if two objects are mutually dependent
      on each other, they can not be inserted or deleted via INSERT or
      DELETE statements alone; an UPDATE will be needed to post-associate
      or pre-deassociate one of the foreign key constrained values.
      The ``post_update`` flag described at :ref:`post_update` can resolve
      this cycle.
    * In a :attr:`_schema.MetaData.sorted_tables` operation, two
      :class:`_schema.ForeignKey`
      or :class:`_schema.ForeignKeyConstraint` objects mutually refer to each
      other.  Apply the ``use_alter=True`` flag to one or both,
      see :ref:`use_alter`.

    """
    def __init__(self, message, cycles, edges, msg=..., code=...) -> None:
        ...
    
    def __reduce__(self):
        ...
    


class CompileError(SQLAlchemyError):
    """Raised when an error occurs during SQL compilation"""
    ...


class UnsupportedCompilationError(CompileError):
    """Raised when an operation is not supported by the given compiler.

    .. seealso::

        :ref:`faq_sql_expression_string`

        :ref:`error_l7de`
    """
    code = ...
    def __init__(self, compiler, element_type) -> None:
        ...
    


class IdentifierError(SQLAlchemyError):
    """Raised when a schema name is beyond the max character limit"""
    ...


class DisconnectionError(SQLAlchemyError):
    """A disconnect is detected on a raw DB-API connection.

    This error is raised and consumed internally by a connection pool.  It can
    be raised by the :meth:`_events.PoolEvents.checkout`
    event so that the host pool
    forces a retry; the exception will be caught three times in a row before
    the pool gives up and raises :class:`~sqlalchemy.exc.InvalidRequestError`
    regarding the connection attempt.

    """
    invalidate_pool = ...


class InvalidatePoolError(DisconnectionError):
    """Raised when the connection pool should invalidate all stale connections.

    A subclass of :class:`_exc.DisconnectionError` that indicates that the
    disconnect situation encountered on the connection probably means the
    entire pool should be invalidated, as the database has been restarted.

    This exception will be handled otherwise the same way as
    :class:`_exc.DisconnectionError`, allowing three attempts to reconnect
    before giving up.

    .. versionadded:: 1.2

    """
    invalidate_pool = ...


class TimeoutError(SQLAlchemyError):
    """Raised when a connection pool times out on getting a connection."""
    ...


class InvalidRequestError(SQLAlchemyError):
    """SQLAlchemy was asked to do something it can't do.

    This error generally corresponds to runtime state errors.

    """
    ...


class NoInspectionAvailable(InvalidRequestError):
    """A subject passed to :func:`sqlalchemy.inspection.inspect` produced
    no context for inspection."""
    ...


class ResourceClosedError(InvalidRequestError):
    """An operation was requested from a connection, cursor, or other
    object that's in a closed state."""
    ...


class NoSuchColumnError(KeyError, InvalidRequestError):
    """A nonexistent column is requested from a ``RowProxy``."""
    ...


class NoReferenceError(InvalidRequestError):
    """Raised by ``ForeignKey`` to indicate a reference cannot be resolved."""
    ...


class NoReferencedTableError(NoReferenceError):
    """Raised by ``ForeignKey`` when the referred ``Table`` cannot be
    located.

    """
    def __init__(self, message, tname) -> None:
        ...
    
    def __reduce__(self):
        ...
    


class NoReferencedColumnError(NoReferenceError):
    """Raised by ``ForeignKey`` when the referred ``Column`` cannot be
    located.

    """
    def __init__(self, message, tname, cname) -> None:
        ...
    
    def __reduce__(self):
        ...
    


class NoSuchTableError(InvalidRequestError):
    """Table does not exist or is not visible to a connection."""
    ...


class UnreflectableTableError(InvalidRequestError):
    """Table exists but can't be reflected for some reason.

    .. versionadded:: 1.2

    """
    ...


class UnboundExecutionError(InvalidRequestError):
    """SQL was attempted without a database connection to execute it on."""
    ...


class DontWrapMixin(object):
    """A mixin class which, when applied to a user-defined Exception class,
    will not be wrapped inside of :exc:`.StatementError` if the error is
    emitted within the process of executing a statement.

    E.g.::

        from sqlalchemy.exc import DontWrapMixin

        class MyCustomException(Exception, DontWrapMixin):
            pass

        class MySpecialType(TypeDecorator):
            impl = String

            def process_bind_param(self, value, dialect):
                if value == 'invalid':
                    raise MyCustomException("invalid!")

    """
    ...


UnmappedColumnError = None
class StatementError(SQLAlchemyError):
    """An error occurred during execution of a SQL statement.

    :class:`StatementError` wraps the exception raised
    during execution, and features :attr:`.statement`
    and :attr:`.params` attributes which supply context regarding
    the specifics of the statement which had an issue.

    The wrapped exception object is available in
    the :attr:`.orig` attribute.

    """
    statement = ...
    params = ...
    orig = ...
    ismulti = ...
    def __init__(self, message, statement, params, orig, hide_parameters=..., code=..., ismulti=...) -> None:
        ...
    
    def add_detail(self, msg):
        ...
    
    def __reduce__(self):
        ...
    


class DBAPIError(StatementError):
    """Raised when the execution of a database operation fails.

    Wraps exceptions raised by the DB-API underlying the
    database operation.  Driver-specific implementations of the standard
    DB-API exception types are wrapped by matching sub-types of SQLAlchemy's
    :class:`DBAPIError` when possible.  DB-API's ``Error`` type maps to
    :class:`DBAPIError` in SQLAlchemy, otherwise the names are identical.  Note
    that there is no guarantee that different DB-API implementations will
    raise the same exception type for any given error condition.

    :class:`DBAPIError` features :attr:`~.StatementError.statement`
    and :attr:`~.StatementError.params` attributes which supply context
    regarding the specifics of the statement which had an issue, for the
    typical case when the error was raised within the context of
    emitting a SQL statement.

    The wrapped exception object is available in the
    :attr:`~.StatementError.orig` attribute. Its type and properties are
    DB-API implementation specific.

    """
    code = ...
    @classmethod
    def instance(cls, statement, params, orig, dbapi_base_err, hide_parameters=..., connection_invalidated=..., dialect=..., ismulti=...):
        ...
    
    def __reduce__(self):
        ...
    
    def __init__(self, statement, params, orig, hide_parameters=..., connection_invalidated=..., code=..., ismulti=...) -> None:
        ...
    


class InterfaceError(DBAPIError):
    """Wraps a DB-API InterfaceError."""
    code = ...


class DatabaseError(DBAPIError):
    """Wraps a DB-API DatabaseError."""
    code = ...


class DataError(DatabaseError):
    """Wraps a DB-API DataError."""
    code = ...


class OperationalError(DatabaseError):
    """Wraps a DB-API OperationalError."""
    code = ...


class IntegrityError(DatabaseError):
    """Wraps a DB-API IntegrityError."""
    code = ...


class InternalError(DatabaseError):
    """Wraps a DB-API InternalError."""
    code = ...


class ProgrammingError(DatabaseError):
    """Wraps a DB-API ProgrammingError."""
    code = ...


class NotSupportedError(DatabaseError):
    """Wraps a DB-API NotSupportedError."""
    code = ...


class SADeprecationWarning(DeprecationWarning):
    """Issued once per usage of a deprecated API."""
    ...


class SAPendingDeprecationWarning(PendingDeprecationWarning):
    """Issued once per usage of a deprecated API."""
    ...


class SAWarning(RuntimeWarning):
    """Issued at runtime."""
    ...


