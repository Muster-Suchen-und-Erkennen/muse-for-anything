"""
This type stub file was generated by pyright.
"""

import logging

"""Logging control and utilities.

Control of logging for SA can be performed from the regular python logging
module.  The regular dotted module namespace is used, starting at
'sqlalchemy'.  For class-level logging, the class name is appended.

The "echo" keyword parameter, available on SQLA :class:`_engine.Engine`
and :class:`_pool.Pool` objects, corresponds to a logger specific to that
instance only.

"""
rootlogger = logging.getLogger("sqlalchemy")
if rootlogger.level == logging.NOTSET:
    ...
_logged_classes = set()
def class_logger(cls):
    ...

class Identified(object):
    logging_name = ...


class InstanceLogger(object):
    """A logger adapter (wrapper) for :class:`.Identified` subclasses.

    This allows multiple instances (e.g. Engine or Pool instances)
    to share a logger, but have its verbosity controlled on a
    per-instance basis.

    The basic functionality is to return a logging level
    which is based on an instance's echo setting.

    Default implementation is:

    'debug' -> logging.DEBUG
    True    -> logging.INFO
    False   -> Effective level of underlying logger (
    logging.WARNING by default)
    None    -> same as False
    """
    _echo_map = ...
    def __init__(self, echo, name) -> None:
        ...
    
    def debug(self, msg, *args, **kwargs):
        """Delegate a debug call to the underlying logger."""
        ...
    
    def info(self, msg, *args, **kwargs):
        """Delegate an info call to the underlying logger."""
        ...
    
    def warning(self, msg, *args, **kwargs):
        """Delegate a warning call to the underlying logger."""
        ...
    
    warn = ...
    def error(self, msg, *args, **kwargs):
        """
        Delegate an error call to the underlying logger.
        """
        ...
    
    def exception(self, msg, *args, **kwargs):
        """Delegate an exception call to the underlying logger."""
        ...
    
    def critical(self, msg, *args, **kwargs):
        """Delegate a critical call to the underlying logger."""
        ...
    
    def log(self, level, msg, *args, **kwargs):
        """Delegate a log call to the underlying logger.

        The level here is determined by the echo
        flag as well as that of the underlying logger, and
        logger._log() is called directly.

        """
        ...
    
    def isEnabledFor(self, level):
        """Is this logger enabled for level 'level'?"""
        ...
    
    def getEffectiveLevel(self):
        """What's the effective level for this logger?"""
        ...
    


def instance_logger(instance, echoflag=...):
    """create a logger for an instance that implements :class:`.Identified`."""
    ...

class echo_property(object):
    __doc__ = ...
    def __get__(self, instance, owner):
        ...
    
    def __set__(self, instance, value):
        ...
    


