"""
This type stub file was generated by pyright.
"""

import contextlib
from ..util import decorator

def skip_if(predicate, reason=...):
    ...

def fails_if(predicate, reason=...):
    ...

class compound(object):
    def __init__(self) -> None:
        ...
    
    def __add__(self, other):
        ...
    
    def add(self, *others):
        ...
    
    def not_(self):
        ...
    
    @property
    def enabled(self):
        ...
    
    def enabled_for_config(self, config):
        ...
    
    def matching_config_reasons(self, config):
        ...
    
    def include_test(self, include_tags, exclude_tags):
        ...
    
    def __call__(self, fn):
        ...
    
    @contextlib.contextmanager
    def fail_if(self):
        ...
    


def requires_tag(tagname):
    ...

def tags(tagnames):
    ...

def only_if(predicate, reason=...):
    ...

def succeeds_if(predicate, reason=...):
    ...

class Predicate(object):
    @classmethod
    def as_predicate(cls, predicate, description=...):
        ...
    


class BooleanPredicate(Predicate):
    def __init__(self, value, description=...) -> None:
        ...
    
    def __call__(self, config):
        ...
    


class SpecPredicate(Predicate):
    def __init__(self, db, op=..., spec=..., description=...) -> None:
        ...
    
    _ops = ...
    def __call__(self, config):
        ...
    


class LambdaPredicate(Predicate):
    def __init__(self, lambda_, description=..., args=..., kw=...) -> None:
        ...
    
    def __call__(self, config):
        ...
    


class NotPredicate(Predicate):
    def __init__(self, predicate, description=...) -> None:
        ...
    
    def __call__(self, config):
        ...
    


class OrPredicate(Predicate):
    def __init__(self, predicates, description=...) -> None:
        ...
    
    def __call__(self, config):
        ...
    


_as_predicate = Predicate.as_predicate
def db_spec(*dbs):
    ...

def open():
    ...

def closed():
    ...

def fails(reason=...):
    ...

@decorator
def future(fn, *arg):
    ...

def fails_on(db, reason=...):
    ...

def fails_on_everything_except(*dbs):
    ...

def skip(db, reason=...):
    ...

def only_on(dbs, reason=...):
    ...

def exclude(db, op, spec, reason=...):
    ...

def against(config, *queries):
    ...

