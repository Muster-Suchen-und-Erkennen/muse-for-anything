"""
This type stub file was generated by pyright.
"""

from .base import MSDialect, VARBINARY, _MSDate, _MSTime
from .pyodbc import MSExecutionContext_pyodbc, _MSNumeric_pyodbc
from ...connectors.mxodbc import MxODBCConnector

"""
.. dialect:: mssql+mxodbc
    :name: mxODBC
    :dbapi: mxodbc
    :connectstring: mssql+mxodbc://<username>:<password>@<dsnname>
    :url: http://www.egenix.com/

Execution Modes
---------------

mxODBC features two styles of statement execution, using the
``cursor.execute()`` and ``cursor.executedirect()`` methods (the second being
an extension to the DBAPI specification). The former makes use of a particular
API call specific to the SQL Server Native Client ODBC driver known
SQLDescribeParam, while the latter does not.

mxODBC apparently only makes repeated use of a single prepared statement
when SQLDescribeParam is used. The advantage to prepared statement reuse is
one of performance. The disadvantage is that SQLDescribeParam has a limited
set of scenarios in which bind parameters are understood, including that they
cannot be placed within the argument lists of function calls, anywhere outside
the FROM, or even within subqueries within the FROM clause - making the usage
of bind parameters within SELECT statements impossible for all but the most
simplistic statements.

For this reason, the mxODBC dialect uses the "native" mode by default only for
INSERT, UPDATE, and DELETE statements, and uses the escaped string mode for
all other statements.

This behavior can be controlled via
:meth:`~sqlalchemy.sql.expression.Executable.execution_options` using the
``native_odbc_execute`` flag with a value of ``True`` or ``False``, where a
value of ``True`` will unconditionally use native bind parameters and a value
of ``False`` will unconditionally use string-escaped parameters.

"""
class _MSNumeric_mxodbc(_MSNumeric_pyodbc):
    """Include pyodbc's numeric processor."""
    ...


class _MSDate_mxodbc(_MSDate):
    def bind_processor(self, dialect):
        ...
    


class _MSTime_mxodbc(_MSTime):
    def bind_processor(self, dialect):
        ...
    


class _VARBINARY_mxodbc(VARBINARY):
    """
    mxODBC Support for VARBINARY column types.

    This handles the special case for null VARBINARY values,
    which maps None values to the mx.ODBC.Manager.BinaryNull symbol.
    """
    def bind_processor(self, dialect):
        ...
    


class MSExecutionContext_mxodbc(MSExecutionContext_pyodbc):
    """
    The pyodbc execution context is useful for enabling
    SELECT SCOPE_IDENTITY in cases where OUTPUT clause
    does not work (tables with insert triggers).
    """
    ...


class MSDialect_mxodbc(MxODBCConnector, MSDialect):
    execution_ctx_cls = ...
    _need_decimal_fix = ...
    colspecs = ...
    def __init__(self, description_encoding=..., **params) -> None:
        ...
    


dialect = MSDialect_mxodbc
