"""
This type stub file was generated by pyright.
"""

from .base import MSDialect, MSIdentifierPreparer
from ... import types as sqltypes

"""
.. dialect:: mssql+pymssql
    :name: pymssql
    :dbapi: pymssql
    :connectstring: mssql+pymssql://<username>:<password>@<freetds_name>/?charset=utf8

pymssql is a Python module that provides a Python DBAPI interface around
`FreeTDS <http://www.freetds.org/>`_.

.. note::

    pymssql is currently not included in SQLAlchemy's continuous integration
    (CI) testing.

Modern versions of this driver worked very well with SQL Server and FreeTDS
from Linux and were highly recommended. However, pymssql is currently
unmaintained and has fallen behind the progress of the Microsoft ODBC driver in
its support for newer features of SQL Server. The latest official release of
pymssql at the time of this document is version 2.1.4 (August, 2018) and it
lacks support for:

1. table-valued parameters (TVPs),
2. ``datetimeoffset`` columns using timezone-aware ``datetime`` objects
   (values are sent and retrieved as strings), and
3. encrypted connections (e.g., to Azure SQL), when pymssql is installed from
   the pre-built wheels. Support for encrypted connections requires building
   pymssql from source, which can be a nuisance, especially under Windows.

The above features are all supported by mssql+pyodbc when using Microsoft's
ODBC Driver for SQL Server (msodbcsql), which is now available for Windows,
(several flavors of) Linux, and macOS.


"""
class _MSNumeric_pymssql(sqltypes.Numeric):
    def result_processor(self, dialect, type_):
        ...
    


class MSIdentifierPreparer_pymssql(MSIdentifierPreparer):
    def __init__(self, dialect) -> None:
        ...
    


class MSDialect_pymssql(MSDialect):
    supports_native_decimal = ...
    driver = ...
    preparer = ...
    colspecs = ...
    @classmethod
    def dbapi(cls):
        ...
    
    def create_connect_args(self, url):
        ...
    
    def is_disconnect(self, e, connection, cursor):
        ...
    
    def set_isolation_level(self, connection, level):
        ...
    


dialect = MSDialect_pymssql
