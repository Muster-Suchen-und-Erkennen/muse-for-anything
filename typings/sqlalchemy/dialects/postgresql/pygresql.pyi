"""
This type stub file was generated by pyright.
"""

from .base import PGCompiler, PGDialect, PGIdentifierPreparer, UUID
from .hstore import HSTORE
from .json import JSON, JSONB
from ...types import Numeric

"""
.. dialect:: postgresql+pygresql
    :name: pygresql
    :dbapi: pgdb
    :connectstring: postgresql+pygresql://user:password@host:port/dbname[?key=value&key=value...]
    :url: http://www.pygresql.org/

.. note::

    The pygresql dialect is **not tested as part of SQLAlchemy's continuous
    integration** and may have unresolved issues.  The recommended PostgreSQL
    dialect is psycopg2.

"""
class _PGNumeric(Numeric):
    def bind_processor(self, dialect):
        ...
    
    def result_processor(self, dialect, coltype):
        ...
    


class _PGHStore(HSTORE):
    def bind_processor(self, dialect):
        ...
    
    def result_processor(self, dialect, coltype):
        ...
    


class _PGJSON(JSON):
    def bind_processor(self, dialect):
        ...
    
    def result_processor(self, dialect, coltype):
        ...
    


class _PGJSONB(JSONB):
    def bind_processor(self, dialect):
        ...
    
    def result_processor(self, dialect, coltype):
        ...
    


class _PGUUID(UUID):
    def bind_processor(self, dialect):
        ...
    
    def result_processor(self, dialect, coltype):
        ...
    


class _PGCompiler(PGCompiler):
    def visit_mod_binary(self, binary, operator, **kw):
        ...
    
    def post_process_text(self, text):
        ...
    


class _PGIdentifierPreparer(PGIdentifierPreparer):
    ...


class PGDialect_pygresql(PGDialect):
    driver = ...
    statement_compiler = ...
    preparer = ...
    @classmethod
    def dbapi(cls):
        ...
    
    colspecs = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def create_connect_args(self, url):
        ...
    
    def is_disconnect(self, e, connection, cursor):
        ...
    


dialect = PGDialect_pygresql
