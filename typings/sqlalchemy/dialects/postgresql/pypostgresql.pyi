"""
This type stub file was generated by pyright.
"""

from .base import PGDialect, PGExecutionContext
from ... import types as sqltypes, util

"""
.. dialect:: postgresql+pypostgresql
    :name: py-postgresql
    :dbapi: pypostgresql
    :connectstring: postgresql+pypostgresql://user:password@host:port/dbname[?key=value&key=value...]
    :url: http://python.projects.pgfoundry.org/

.. note::

    The pypostgresql dialect is **not tested as part of SQLAlchemy's continuous
    integration** and may have unresolved issues.  The recommended PostgreSQL
    driver is psycopg2.


"""
class PGNumeric(sqltypes.Numeric):
    def bind_processor(self, dialect):
        ...
    
    def result_processor(self, dialect, coltype):
        ...
    


class PGExecutionContext_pypostgresql(PGExecutionContext):
    ...


class PGDialect_pypostgresql(PGDialect):
    driver = ...
    supports_unicode_statements = ...
    supports_unicode_binds = ...
    description_encoding = ...
    default_paramstyle = ...
    supports_sane_rowcount = ...
    supports_sane_multi_rowcount = ...
    execution_ctx_cls = ...
    colspecs = ...
    @classmethod
    def dbapi(cls):
        ...
    
    _DBAPI_ERROR_NAMES = ...
    @util.memoized_property
    def dbapi_exception_translation_map(self):
        ...
    
    def create_connect_args(self, url):
        ...
    
    def is_disconnect(self, e, connection, cursor):
        ...
    


dialect = PGDialect_pypostgresql
