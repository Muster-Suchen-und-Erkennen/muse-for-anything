"""
This type stub file was generated by pyright.
"""

from .base import OracleCompiler, OracleDialect, OracleExecutionContext
from ... import types as sqltypes
from ...connectors.zxJDBC import ZxJDBCConnector
from ...engine import result as _result

"""
.. dialect:: oracle+zxjdbc
    :name: zxJDBC for Jython
    :dbapi: zxjdbc
    :connectstring: oracle+zxjdbc://user:pass@host/dbname
    :driverurl: http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html

    .. note:: Jython is not supported by current versions of SQLAlchemy.  The
       zxjdbc dialect should be considered as experimental.

"""
SQLException = zxJDBC = None
class _ZxJDBCDate(sqltypes.Date):
    def result_processor(self, dialect, coltype):
        ...
    


class _ZxJDBCNumeric(sqltypes.Numeric):
    def result_processor(self, dialect, coltype):
        ...
    


class OracleCompiler_zxjdbc(OracleCompiler):
    def returning_clause(self, stmt, returning_cols):
        ...
    


class OracleExecutionContext_zxjdbc(OracleExecutionContext):
    def pre_exec(self):
        ...
    
    def get_result_proxy(self):
        ...
    
    def create_cursor(self):
        ...
    


class ReturningResultProxy(_result.FullyBufferedResultProxy):
    """ResultProxy backed by the RETURNING ResultSet results."""
    def __init__(self, context, returning_row) -> None:
        ...
    


class ReturningParam(object):
    """A bindparam value representing a RETURNING parameter.

    Specially handled by OracleReturningDataHandler.
    """
    def __init__(self, type_) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __repr__(self):
        ...
    


class OracleDialect_zxjdbc(ZxJDBCConnector, OracleDialect):
    jdbc_db_name = ...
    jdbc_driver_name = ...
    statement_compiler = ...
    execution_ctx_cls = ...
    colspecs = ...
    def __init__(self, *args, **kwargs) -> None:
        class OracleReturningDataHandler(OracleDataHandler):
            """zxJDBC DataHandler that specially handles ReturningParam."""
            ...
        
        
    
    def initialize(self, connection):
        ...
    


dialect = OracleDialect_zxjdbc
