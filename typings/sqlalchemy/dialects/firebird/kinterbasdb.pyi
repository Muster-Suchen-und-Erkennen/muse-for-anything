"""
This type stub file was generated by pyright.
"""

from .base import FBDialect, FBExecutionContext
from ... import types as sqltypes

"""
.. dialect:: firebird+kinterbasdb
    :name: kinterbasdb
    :dbapi: kinterbasdb
    :connectstring: firebird+kinterbasdb://user:password@host:port/path/to/db[?key=value&key=value...]
    :url: http://firebirdsql.org/index.php?op=devel&sub=python

Arguments
----------

The Kinterbasdb backend accepts the ``enable_rowcount`` and ``retaining``
arguments accepted by the :mod:`sqlalchemy.dialects.firebird.fdb` dialect.
In addition, it also accepts the following:

* ``type_conv`` - select the kind of mapping done on the types: by default
  SQLAlchemy uses 200 with Unicode, datetime and decimal support.  See
  the linked documents below for further information.

* ``concurrency_level`` - set the backend policy with regards to threading
  issues: by default SQLAlchemy uses policy 1.  See the linked documents
  below for further information.

.. seealso::

    http://sourceforge.net/projects/kinterbasdb

    http://kinterbasdb.sourceforge.net/dist_docs/usage.html#adv_param_conv_dynamic_type_translation

    http://kinterbasdb.sourceforge.net/dist_docs/usage.html#special_issue_concurrency

"""
class _kinterbasdb_numeric(object):
    def bind_processor(self, dialect):
        ...
    


class _FBNumeric_kinterbasdb(_kinterbasdb_numeric, sqltypes.Numeric):
    ...


class _FBFloat_kinterbasdb(_kinterbasdb_numeric, sqltypes.Float):
    ...


class FBExecutionContext_kinterbasdb(FBExecutionContext):
    @property
    def rowcount(self):
        ...
    


class FBDialect_kinterbasdb(FBDialect):
    driver = ...
    supports_sane_rowcount = ...
    supports_sane_multi_rowcount = ...
    execution_ctx_cls = ...
    supports_native_decimal = ...
    colspecs = ...
    def __init__(self, type_conv=..., concurrency_level=..., enable_rowcount=..., retaining=..., **kwargs) -> None:
        ...
    
    @classmethod
    def dbapi(cls):
        ...
    
    def do_execute(self, cursor, statement, parameters, context=...):
        ...
    
    def do_rollback(self, dbapi_connection):
        ...
    
    def do_commit(self, dbapi_connection):
        ...
    
    def create_connect_args(self, url):
        ...
    
    def is_disconnect(self, e, connection, cursor):
        ...
    


dialect = FBDialect_kinterbasdb
