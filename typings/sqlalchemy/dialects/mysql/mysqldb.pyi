"""
This type stub file was generated by pyright.
"""

from .base import MySQLCompiler, MySQLDialect, MySQLExecutionContext, MySQLIdentifierPreparer
from ... import util

"""

.. dialect:: mysql+mysqldb
    :name: mysqlclient (maintained fork of MySQL-Python)
    :dbapi: mysqldb
    :connectstring: mysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>
    :url: https://pypi.org/project/mysqlclient/

Driver Status
-------------

The mysqlclient DBAPI is a maintained fork of the
`MySQL-Python <http://sourceforge.net/projects/mysql-python>`_ DBAPI
that is no longer maintained.  `mysqlclient`_ supports Python 2 and Python 3
and is very stable.

.. _mysqlclient: https://github.com/PyMySQL/mysqlclient-python

.. _mysqldb_unicode:

Unicode
-------

Please see :ref:`mysql_unicode` for current recommendations on unicode
handling.


Using MySQLdb with Google Cloud SQL
-----------------------------------

Google Cloud SQL now recommends use of the MySQLdb dialect.  Connect
using a URL like the following::

    mysql+mysqldb://root@/<dbname>?unix_socket=/cloudsql/<projectid>:<instancename>

Server Side Cursors
-------------------

The mysqldb dialect supports server-side cursors. See :ref:`mysql_ss_cursors`.

"""
class MySQLExecutionContext_mysqldb(MySQLExecutionContext):
    @property
    def rowcount(self):
        ...
    


class MySQLCompiler_mysqldb(MySQLCompiler):
    ...


class MySQLIdentifierPreparer_mysqldb(MySQLIdentifierPreparer):
    ...


class MySQLDialect_mysqldb(MySQLDialect):
    driver = ...
    supports_unicode_statements = ...
    supports_sane_rowcount = ...
    supports_sane_multi_rowcount = ...
    supports_native_decimal = ...
    default_paramstyle = ...
    execution_ctx_cls = ...
    statement_compiler = ...
    preparer = ...
    def __init__(self, server_side_cursors=..., **kwargs) -> None:
        ...
    
    @util.langhelpers.memoized_property
    def supports_server_side_cursors(self):
        ...
    
    @classmethod
    def dbapi(cls):
        ...
    
    def on_connect(self):
        ...
    
    def do_ping(self, dbapi_connection):
        ...
    
    def do_executemany(self, cursor, statement, parameters, context=...):
        ...
    
    def create_connect_args(self, url):
        ...
    
    _isolation_lookup = ...


dialect = MySQLDialect_mysqldb
