"""
This type stub file was generated by pyright.
"""

from .base import BIT, MySQLDialect, MySQLExecutionContext
from ... import util

"""

.. dialect:: mysql+oursql
    :name: OurSQL
    :dbapi: oursql
    :connectstring: mysql+oursql://<user>:<password>@<host>[:<port>]/<dbname>
    :url: http://packages.python.org/oursql/

.. note::

    The OurSQL MySQL dialect is legacy and is no longer supported upstream,
    and is **not tested as part of SQLAlchemy's continuous integration**.
    The recommended MySQL dialects are mysqlclient and PyMySQL.

Unicode
-------

Please see :ref:`mysql_unicode` for current recommendations on unicode
handling.


"""
class _oursqlBIT(BIT):
    def result_processor(self, dialect, coltype):
        """oursql already converts mysql bits, so."""
        ...
    


class MySQLExecutionContext_oursql(MySQLExecutionContext):
    @property
    def plain_query(self):
        ...
    


class MySQLDialect_oursql(MySQLDialect):
    driver = ...
    if util.py2k:
        supports_unicode_binds = ...
        supports_unicode_statements = ...
    supports_native_decimal = ...
    supports_sane_rowcount = ...
    supports_sane_multi_rowcount = ...
    execution_ctx_cls = ...
    colspecs = ...
    @classmethod
    def dbapi(cls):
        ...
    
    def do_execute(self, cursor, statement, parameters, context=...):
        """Provide an implementation of
        *cursor.execute(statement, parameters)*."""
        ...
    
    def do_begin(self, connection):
        ...
    
    def do_begin_twophase(self, connection, xid):
        ...
    
    def do_prepare_twophase(self, connection, xid):
        ...
    
    def do_rollback_twophase(self, connection, xid, is_prepared=..., recover=...):
        ...
    
    def do_commit_twophase(self, connection, xid, is_prepared=..., recover=...):
        ...
    
    def has_table(self, connection, table_name, schema=...):
        ...
    
    def get_table_options(self, connection, table_name, schema=..., **kw):
        ...
    
    def get_columns(self, connection, table_name, schema=..., **kw):
        ...
    
    def get_view_names(self, connection, schema=..., **kw):
        ...
    
    def get_table_names(self, connection, schema=..., **kw):
        ...
    
    def get_schema_names(self, connection, **kw):
        ...
    
    def initialize(self, connection):
        ...
    
    def is_disconnect(self, e, connection, cursor):
        ...
    
    def create_connect_args(self, url):
        ...
    


dialect = MySQLDialect_oursql
