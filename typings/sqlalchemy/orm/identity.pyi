"""
This type stub file was generated by pyright.
"""

from .. import util

class IdentityMap(object):
    def __init__(self) -> None:
        ...
    
    def keys(self):
        ...
    
    def replace(self, state):
        ...
    
    def add(self, state):
        ...
    
    def update(self, dict_):
        ...
    
    def clear(self):
        ...
    
    def check_modified(self):
        """return True if any InstanceStates present have been marked
        as 'modified'.

        """
        ...
    
    def has_key(self, key):
        ...
    
    def popitem(self):
        ...
    
    def pop(self, key, *args):
        ...
    
    def setdefault(self, key, default=...):
        ...
    
    def __len__(self):
        ...
    
    def copy(self):
        ...
    
    def __setitem__(self, key, value):
        ...
    
    def __delitem__(self, key):
        ...
    


class WeakInstanceDict(IdentityMap):
    def __getitem__(self, key):
        ...
    
    def __contains__(self, key):
        ...
    
    def contains_state(self, state):
        ...
    
    def replace(self, state):
        ...
    
    def add(self, state):
        ...
    
    def get(self, key, default=...):
        ...
    
    def items(self):
        ...
    
    def values(self):
        ...
    
    def __iter__(self):
        ...
    
    if util.py2k:
        def iteritems(self):
            ...
        
        def itervalues(self):
            ...
        
    def all_states(self):
        ...
    
    def discard(self, state):
        ...
    
    def safe_discard(self, state):
        ...
    
    def prune(self):
        ...
    


class StrongInstanceDict(IdentityMap):
    """A 'strong-referencing' version of the identity map.

    .. deprecated 1.1::
        The strong
        reference identity map is legacy.  See the
        recipe at :ref:`session_referencing_behavior` for
        an event-based approach to maintaining strong identity
        references.


    """
    if util.py2k:
        def itervalues(self):
            ...
        
        def iteritems(self):
            ...
        
    def __iter__(self):
        ...
    
    def __getitem__(self, key):
        ...
    
    def __contains__(self, key):
        ...
    
    def get(self, key, default=...):
        ...
    
    def values(self):
        ...
    
    def items(self):
        ...
    
    def all_states(self):
        ...
    
    def contains_state(self, state):
        ...
    
    def replace(self, state):
        ...
    
    def add(self, state):
        ...
    
    def discard(self, state):
        ...
    
    def safe_discard(self, state):
        ...
    
    def prune(self):
        """prune unreferenced, non-dirty states."""
        ...
    


