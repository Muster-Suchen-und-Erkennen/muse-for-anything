"""
This type stub file was generated by pyright.
"""

import typing
import marshmallow as ma

logger = ...
DEFAULT_VALIDATION_STATUS: int = ...
def is_multiple(field):
    """Return whether or not `field` handles repeated/multi-value arguments."""
    ...

def get_mimetype(content_type):
    ...

def is_json(mimetype):
    """Indicates if this mimetype is JSON or not.  By default a request
    is considered to include JSON data if the mimetype is
    ``application/json`` or ``application/*+json``.
    """
    ...

def parse_json(string, *, encoding=...):
    ...

class Parser:
    """Base parser class that provides high-level implementation for parsing
    a request.

    Descendant classes must provide lower-level implementations for reading
    data from  different locations, e.g. ``load_json``, ``load_querystring``,
    etc.

    :param str location: Default location to use for data
    :param callable error_handler: Custom error handler function.
    """
    DEFAULT_LOCATION = ...
    DEFAULT_SCHEMA_CLASS = ma.Schema
    DEFAULT_VALIDATION_STATUS = ...
    DEFAULT_VALIDATION_MESSAGE = ...
    __location_map__ = ...
    def __init__(self, location=..., *, error_handler=..., schema_class=...) -> None:
        ...
    
    def parse(self, argmap, req=..., *, location=..., validate=..., error_status_code=..., error_headers=...):
        """Main request parsing method.

        :param argmap: Either a `marshmallow.Schema`, a `dict`
            of argname -> `marshmallow.fields.Field` pairs, or a callable
            which accepts a request and returns a `marshmallow.Schema`.
        :param req: The request object to parse.
        :param str location: Where on the request to load values.
            Can be any of the values in :py:attr:`~__location_map__`. By
            default, that means one of ``('json', 'query', 'querystring',
            'form', 'headers', 'cookies', 'files', 'json_or_form')``.
        :param callable validate: Validation function or list of validation functions
            that receives the dictionary of parsed arguments. Validator either returns a
            boolean or raises a :exc:`ValidationError`.
        :param int error_status_code: Status code passed to error handler functions when
            a `ValidationError` is raised.
        :param dict error_headers: Headers passed to error handler functions when a
            a `ValidationError` is raised.

         :return: A dictionary of parsed arguments
        """
        ...
    
    def get_default_request(self):
        """Optional override. Provides a hook for frameworks that use thread-local
        request objects.
        """
        ...
    
    def get_request_from_view_args(self, view, args, kwargs):
        """Optional override. Returns the request object to be parsed, given a view
        function's args and kwargs.

        Used by the `use_args` and `use_kwargs` to get a request object from a
        view's arguments.

        :param callable view: The view function or method being decorated by
            `use_args` or `use_kwargs`
        :param tuple args: Positional arguments passed to ``view``.
        :param dict kwargs: Keyword arguments passed to ``view``.
        """
        ...
    
    def use_args(self, argmap, req=..., *, location=..., as_kwargs=..., validate=..., error_status_code=..., error_headers=...):
        """Decorator that injects parsed arguments into a view function or method.

        Example usage with Flask: ::

            @app.route('/echo', methods=['get', 'post'])
            @parser.use_args({'name': fields.Str()}, location="querystring")
            def greet(args):
                return 'Hello ' + args['name']

        :param argmap: Either a `marshmallow.Schema`, a `dict`
            of argname -> `marshmallow.fields.Field` pairs, or a callable
            which accepts a request and returns a `marshmallow.Schema`.
        :param str location: Where on the request to load values.
        :param bool as_kwargs: Whether to insert arguments as keyword arguments.
        :param callable validate: Validation function that receives the dictionary
            of parsed arguments. If the function returns ``False``, the parser
            will raise a :exc:`ValidationError`.
        :param int error_status_code: Status code passed to error handler functions when
            a `ValidationError` is raised.
        :param dict error_headers: Headers passed to error handler functions when a
            a `ValidationError` is raised.
        """
        ...
    
    def use_kwargs(self, *args, **kwargs) -> typing.Callable:
        """Decorator that injects parsed arguments into a view function or method
        as keyword arguments.

        This is a shortcut to :meth:`use_args` with ``as_kwargs=True``.

        Example usage with Flask: ::

            @app.route('/echo', methods=['get', 'post'])
            @parser.use_kwargs({'name': fields.Str()})
            def greet(name):
                return 'Hello ' + name

        Receives the same ``args`` and ``kwargs`` as :meth:`use_args`.
        """
        ...
    
    def location_loader(self, name):
        """Decorator that registers a function for loading a request location.
        The wrapped function receives a schema and a request.

        The schema will usually not be relevant, but it's important in some
        cases -- most notably in order to correctly load multidict values into
        list fields. Without the schema, there would be no way to know whether
        to simply `.get()` or `.getall()` from a multidict for a given value.

        Example: ::

            from webargs import core
            parser = core.Parser()

            @parser.location_loader("name")
            def load_data(request, schema):
                return request.data

        :param str name: The name of the location to register.
        """
        ...
    
    def error_handler(self, func):
        """Decorator that registers a custom error handling function. The
        function should receive the raised error, request object,
        `marshmallow.Schema` instance used to parse the request, error status code,
        and headers to use for the error response. Overrides
        the parser's ``handle_error`` method.

        Example: ::

            from webargs import flaskparser

            parser = flaskparser.FlaskParser()


            class CustomError(Exception):
                pass


            @parser.error_handler
            def handle_error(error, req, schema, *, error_status_code, error_headers):
                raise CustomError(error.messages)

        :param callable func: The error callback to register.
        """
        ...
    
    def load_json(self, req, schema):
        """Load JSON from a request object or return `missing` if no value can
        be found.
        """
        ...
    
    def load_json_or_form(self, req, schema):
        """Load data from a request, accepting either JSON or form-encoded
        data.

        The data will first be loaded as JSON, and, if that fails, it will be
        loaded as a form post.
        """
        ...
    
    def load_querystring(self, req, schema):
        """Load the query string of a request object or return `missing` if no
        value can be found.
        """
        ...
    
    def load_form(self, req, schema):
        """Load the form data of a request object or return `missing` if no
        value can be found.
        """
        ...
    
    def load_headers(self, req, schema):
        """Load the headers or return `missing` if no value can be found."""
        ...
    
    def load_cookies(self, req, schema):
        """Load the cookies from the request or return `missing` if no value
        can be found.
        """
        ...
    
    def load_files(self, req, schema):
        """Load files from the request or return `missing` if no values can be
        found.
        """
        ...
    
    def handle_error(self, error, req, schema, *, error_status_code, error_headers):
        """Called if an error occurs while parsing args. By default, just logs and
        raises ``error``.
        """
        ...
    


